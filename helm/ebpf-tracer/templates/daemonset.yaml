apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "ebpf-tracer.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ebpf-tracer.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "ebpf-tracer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "ebpf-tracer.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ebpf-tracer.serviceAccountName" . }}
      hostNetwork: true
      hostPID: true
      dnsPolicy: ClusterFirstWithHostNet
      
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      {{- if .Values.initContainers.checkPrerequisites.enabled }}
      initContainers:
      - name: check-prerequisites
        image: "{{ .Values.initContainers.checkPrerequisites.image.repository }}:{{ .Values.initContainers.checkPrerequisites.image.tag }}"
        imagePullPolicy: {{ .Values.initContainers.checkPrerequisites.image.pullPolicy }}
        command:
        - sh
        - -c
        - |
          echo "Checking eBPF prerequisites..."
          
          if [ ! -d "/host/sys/fs/bpf" ]; then
            echo "ERROR: BPF filesystem not mounted on host"
            exit 1
          fi
          
          KERNEL_VERSION=$(cat /host/proc/version | awk '{print $3}')
          echo "Kernel version: $KERNEL_VERSION"
          
          if [ ! -f "/host/proc/kallsyms" ]; then
            echo "WARNING: /proc/kallsyms not available"
          fi
          
          echo "Prerequisites check completed"
        
        securityContext:
          privileged: true
        
        volumeMounts:
        {{- if .Values.volumeMounts.hostSys }}
        - name: host-sys
          mountPath: /host/sys
          readOnly: true
        {{- end }}
        {{- if .Values.volumeMounts.hostProc }}
        - name: host-proc
          mountPath: /host/proc
          readOnly: true
        {{- end }}
      {{- end }}
      
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        {{- with .Values.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        
        volumeMounts:
        - name: config
          mountPath: /etc/ebpf-tracer
          readOnly: true
        - name: scripts
          mountPath: /scripts
          readOnly: true
        {{- if .Values.volumeMounts.hostSys }}
        - name: host-sys
          mountPath: /sys
          readOnly: true
        {{- end }}
        {{- if .Values.volumeMounts.hostProc }}
        - name: host-proc
          mountPath: /host/proc
          readOnly: true
        {{- end }}
        {{- if .Values.volumeMounts.hostDev }}
        - name: host-dev
          mountPath: /host/dev
          readOnly: true
        {{- end }}
        {{- if .Values.volumeMounts.bpfMaps }}
        - name: bpf-maps
          mountPath: /sys/fs/bpf
        {{- end }}
        {{- if .Values.volumeMounts.debugfs }}
        - name: debugfs
          mountPath: /sys/kernel/debug
        {{- end }}
        {{- with .Values.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        
        ports:
        - name: metrics
          containerPort: {{ .Values.service.ports.metrics.targetPort }}
          protocol: {{ .Values.service.ports.metrics.protocol }}
        - name: api
          containerPort: {{ .Values.service.ports.api.targetPort }}
          protocol: {{ .Values.service.ports.api.protocol }}
        
        {{- if .Values.probes.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - /scripts/health-check.sh
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
        {{- end }}
        
        {{- if .Values.probes.readiness.enabled }}
        readinessProbe:
          exec:
            command:
            - /scripts/health-check.sh
          initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
        {{- end }}
        
        {{- if .Values.probes.startup.enabled }}
        startupProbe:
          exec:
            command:
            - /scripts/health-check.sh
          initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.startup.failureThreshold }}
        {{- end }}
      
      {{- with .Values.sidecars }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      
      volumes:
      - name: config
        configMap:
          name: {{ include "ebpf-tracer.fullname" . }}-config
          defaultMode: 0644
      - name: scripts
        configMap:
          name: {{ include "ebpf-tracer.fullname" . }}-scripts
          defaultMode: 0755
      {{- if .Values.volumeMounts.hostSys }}
      - name: host-sys
        hostPath:
          path: /sys
          type: Directory
      {{- end }}
      {{- if .Values.volumeMounts.hostProc }}
      - name: host-proc
        hostPath:
          path: /proc
          type: Directory
      {{- end }}
      {{- if .Values.volumeMounts.hostDev }}
      - name: host-dev
        hostPath:
          path: /dev
          type: Directory
      {{- end }}
      {{- if .Values.volumeMounts.bpfMaps }}
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      {{- end }}
      {{- if .Values.volumeMounts.debugfs }}
      - name: debugfs
        hostPath:
          path: /sys/kernel/debug
          type: Directory
      {{- end }}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      
      updateStrategy:
        {{- toYaml .Values.updateStrategy | nindent 8 }}
      
      terminationGracePeriodSeconds: 30
