version: '3.8'

services:
  # eBPF HTTP Tracer
  ebpf-tracer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ebpf-http-tracer
    privileged: true  # Required for eBPF
    pid: host         # Required for system-wide tracing
    network_mode: host # Required for network tracing
    volumes:
      - /sys/fs/bpf:/sys/fs/bpf:rw
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ./configs:/app/config:ro
      - ./logs:/app/logs:rw
    environment:
      - HTTP_TRACER_ENABLE_DISTRIBUTED_TRACING=true
      - HTTP_TRACER_ENABLE_ANALYTICS=true
      - HTTP_TRACER_ANALYTICS_DASHBOARD_PORT=8080
      - HTTP_TRACER_DISTRIBUTED_TRACING_JAEGER_COLLECTOR_URL=http://jaeger:14268/api/traces
      - HTTP_TRACER_LOG_LEVEL=info
    ports:
      - "8080:8080"  # Analytics dashboard
      - "9090:9090"  # Metrics endpoint
    depends_on:
      - jaeger
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
      - "14250:14250"  # Jaeger gRPC
      - "9411:9411"    # Zipkin
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"  # Prometheus UI (avoid conflict with tracer)
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployments/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"  # Grafana UI
    depends_on:
      - prometheus
    restart: unless-stopped

  # AlertManager for alerting
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./deployments/monitoring/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"  # AlertManager UI
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    restart: unless-stopped

  # Test application for generating HTTP traffic
  test-app:
    image: nginx:alpine
    container_name: test-app
    volumes:
      - ./deployments/test-app/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/test-app/html:/usr/share/nginx/html:ro
    ports:
      - "8081:80"
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  default:
    name: ebpf-monitoring
    driver: bridge
